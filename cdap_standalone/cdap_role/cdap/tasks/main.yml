---
# tasks file for cdap

- name: Create users
  user:
    name: "{{ item.user }}"
    comment: '"{{ item.comment }}"'
    group: hadoop
    groups: hadoop
  with_items:
    - { user: 'cdap', comment: 'CDAP user'  }

- name: Checking if CDAP's rpms are already installed or not
  shell: yum list installed | grep cdap
  register: result
  ignore_errors: true
  when: inventory_hostname in groups['cdap-master-nodes']

#- fail:
#   msg: "Some CDAP rpms are already installed"
#  when: result.stdout is match("cdap-*")

#- name: Creating Directory /opt/cdap-repos
#  file:
#    path: /opt/cdap-repos
#    state: directory
#  when: inventory_hostname in groups['cdap-master-nodes']

#- name: Downloading the Required CDAP RPMs
#  shell: "wget -A rpm  -m -p -E -k -K -nd -l 1 {{ cdap_repo_url }}"
#  args:
#    chdir: /opt/cdap-repos
#  when: inventory_hostname in groups['cdap-master-nodes']

#- name: Listing needed files
#  tags: test1
#  find:
#    paths: /opt/cdap-repos
#    excludes: 'cdap-ambari*,repodata,metadatasync*,cdap-provisioner*'
#  register: fileslist
#  when: inventory_hostname in groups['cdap-master-nodes']

#- name: "Installing CDAP RPMs"
#  tags: test2
#  yum:
#   name: "{{ item.path }}"
#    state: present
#  with_items: "{{ fileslist.files }}"
#  when: inventory_hostname in groups['cdap-master-nodes']

- name: Check for /opt/cdap
  stat: path=/opt/cdap
  register: directory
  when: inventory_hostname in groups['cdap-master-nodes']

#- fail:
#   msg: "/opt/cdap is not present"
#  when: not directory.stat.exists

- name: Copying cdap-env.sh to /etc/cdap/conf
  template:
    src: cdap-env.sh.j2
    dest: /etc/cdap/conf/cdap-env.sh
  when: inventory_hostname in groups['cdap-master-nodes']

- name: Getting mgt server
  shell: cat /etc/hosts | grep mgt | awk '{print $1}' | head -1
  register: mgt
  when: inventory_hostname in groups['cdap-master-nodes']

- name: Getting list of Zookeeper Nodes
  shell: curl -u '{{ ambari_user }}':'{{ ambari_pass }}' -H "X-Requested-By:ambari" -i http://"{{ mgt.stdout }}":8080/api/v1/clusters/rafd004/components/ZOOKEEPER_SERVER | grep "host_name" | awk '{print $3}' | sed 's/$/:2181/' | sed 's/"//g' | paste -s -d, /dev/stdin 
  register: zookeepernodes
  when: inventory_hostname in groups['cdap-master-nodes']

- name: Getting master server
  shell: cat /etc/hosts | grep mst | awk '{print $2}' | sed 's/$/:9092/' | paste -s -d, /dev/stdin
  register: mst
  when: inventory_hostname in groups['cdap-master-nodes']
 
- name: Getting fqdn of master on which CDAP is being Installed
  shell: hostname -f
  register: master
  when: inventory_hostname in groups['cdap-master-nodes']

- name: Copying cdap-site.xml to /etc/cdap/conf
  template:
    src: cdap-site.xml.j2
    dest: /etc/cdap/conf/cdap-site.xml
  when: inventory_hostname in groups['cdap-master-nodes']

- name: GET group id for group hadoop
  uri:
    url: "http://{{ rangerserver }}:6080/service/xusers/groups/groupName/hadoop"
    method: GET
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"Content-Type":"application/json","X-Xsrf-Header":"valid","Accept":"application/json"}'
    status_code: 200,201,202,400
    return_content: yes
  register: cdap__ranger_group_hadoop
  when: inventory_hostname in groups['cdap-management-nodes']

- name: Create CDAP user in ranger
  uri:
    url: "http://{{ rangerserver }}:6080/service/xusers/secure/users"
    method: POST
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"Content-Type":"application/json", "X-Xsrf-Header":"valid"}'
    body: ' {"name":"cdap","firstName":"cdap","lastName": "","loginId": "cdap","emailAddress" : null,"description" : "cdap","password" : "cdap@123","groupIdList":[{{ cdap__ranger_group_hadoop.json.id }}],"status":1,"isVisible":1,"userRoleList": [ "ROLE_USER" ],"userSource": 0}'
    body_format: json
    status_code: 200,201,202,400
    return_content: yes
  when: inventory_hostname in groups['cdap-management-nodes']

- name: Deleting hdfs policies
  uri:
    url: "http://{{ rangerserver }}:6080/service/public/v2/api/policy?servicename={{ cdap_cluster_name }}_yarn&policyname={{item}}"
    method: DELETE
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"X-Xsrf-Header":"valid"}'
    status_code: 204,404
    return_content: no
  with_items:
    - "cdap_user"
  when: inventory_hostname in groups['cdap-management-nodes']

- name: Deleting hadoop policies
  uri:
    url: "http://{{ rangerserver }}:6080/service/public/v2/api/policy?servicename={{ cdap_cluster_name }}_hadoop&policyname={{item}}"
    method: DELETE
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"X-Xsrf-Header":"valid"}'
    status_code: 204,404
    return_content: no
  with_items:
    - "cdap_path"
    - "cdap_yarn_path"
  when: inventory_hostname in groups['cdap-management-nodes']

- name: Deleting hbase policies
  uri:
    url: "http://{{ rangerserver }}:6080/service/public/v2/api/policy?servicename={{ cdap_cluster_name }}_hbase&policyname={{item}}"
    method: DELETE
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"X-Xsrf-Header":"valid"}'
    status_code: 204,404
    return_content: no
  with_items:
    - "hbase-cdap-all"
  when: inventory_hostname in groups['cdap-management-nodes']

- name: Add/Update ranger hdfs policies
  uri:
    url: "http://{{ rangerserver }}:6080/service/public/v2/api/policy"
    method: POST
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"Content-Type":"application/json", "X-Xsrf-Header":"valid"}'
    body: "{{ item }}"
    body_format: json
    status_code: 200,201,202,400
    return_content: yes
  with_items:
    - "{{ cdap_user_policy_config }}"
    - "{{ cdap_path_policy_config }}"
    - "{{ yarn_path_policy_config }}"
    - "{{ hbase_all_policy_config }}"
  when: inventory_hostname in groups['cdap-management-nodes']

- name: Generating keytab and principal for CDAP
  vars:
    url_body:
      Credential:
        principal: "{{krb_admin_principal}}"
        key: "{{krb_admin_password}}"
        type: "temporary"
    url_body2:
      Clusters:
        security_type: "KERBEROS"
  block:
    - name: Remove Temporary KDC credentials FOR CDAP
      uri:
        url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/credentials/kdc.admin.credential"
        method: DELETE
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari"}'
        status_code: 200,201,202,404,500
        return_content: yes
      register: kdc_cred_status
      when: 
        - (is_kerberos_auth_enabled|lower)|bool
        - inventory_hostname in groups['cdap-management-nodes']

    - name: Temporary KDC credentials FOR CDAP
      uri:
        url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/credentials/kdc.admin.credential"
        method: POST
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari"}'
        body: "'{{ url_body | to_json }}'"
        body_format: json
        status_code: 200,201,202,404,500
        return_content: yes
      register: cdap_krb_info
      when: 
        - (is_kerberos_auth_enabled|lower)|bool
        - inventory_hostname in groups['cdap-management-nodes']

    - name: Creating Keytab and Principal 
      uri:
        url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/?regenerate_keytabs=missing"
        method: PUT
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari"}'
        body: "'{{ url_body2 | to_json }}'"
        body_format: json
        status_code: 200,201,202,404
        return_content: yes
      register: cdap_krb_result
      when:
        - (is_kerberos_auth_enabled|lower)|bool
        - inventory_hostname in groups['cdap-management-nodes']

- name: Restarting required Services
  shell: |
    service cdap-auth-server restart
    service cdap-kafka-server restart
    service cdap-router restart
    service cdap-ui restart
    service cdap-master restart
  when: inventory_hostname in groups['cdap-master-nodes']
