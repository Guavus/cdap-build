---
# tasks file for cdap-ui
- name: Setting cdap ui theme (cdap-site)
  shell: "/var/lib/ambari-server/resources/scripts/configs.py -a set -u {{ ambari_admin_user }} -p {{ ambari_admin_password }} -l {{ cdap_loadbalancer_vip }} -n {{ cluster_name }} -c {{ item.config }} -k {{ item.key }} -v {{ item.value }}"
  with_items:
    - { config: 'cdap-site', key: 'ui.theme.file', value: '{{cdap__ui_theme_file}}' }
    - { config: 'cdap-site', key: 'data.tx.max.timeout', value: '{{cdap__data_tx_max_timeout}}'}
    - { config: 'cdap-site', key: 'data.tx.timeout', value: '{{cdap__data_tx_timeout}}'}
  when: 
    - inventory_hostname == groups[cdap_management_nodes][0]
    - analytics_engine == true

- name: Start CDAP Service
  uri:
    url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/services/CDAP"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: '{ "RequestInfo": {"context" :"Start CDAP components via REST api"}, "Body": {"ServiceInfo": {"state" : "STARTED"}}}'
    status_code: 200,201,202,404
    return_content: yes
  register: cdap_start_task
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: WAIT FOR CDAP TO START
  uri:
    url: "{{ (cdap_start_task.content|from_json).href }}"
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cdap_check_task
  until: (((cdap_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cdap_check_task.content|from_json).Requests.completed_task_count|int > 0) or
         (cdap_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cdap_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cdap_check_task.content|from_json).Requests.request_status == 'ABORTED')
  retries: 20
  delay: 30
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_start_task.content != ""


- name: Restart ALL Required SERVICES
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/requests"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: ' {"RequestInfo": { "command":"RESTART", "context":"Restart all required services", "operation_level":"host_component" }, "Requests/resource_filters": [{ "hosts_predicate":"HostRoles/stale_configs=true" }]} '
    status_code: 200,201,202,404
    return_content: yes
  register: restart_reqd_services
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: WAIT FOR SERVICES TO RESTART
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/requests/{{ (restart_reqd_services.content|from_json).Requests.id }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: yes
  register: restartservice
  until: (restartservice.content|from_json).Requests.request_status == 'COMPLETED'
  retries: 30
  delay: 30
  when: inventory_hostname == groups[cdap_management_nodes][0] and restart_reqd_services.content != ""
