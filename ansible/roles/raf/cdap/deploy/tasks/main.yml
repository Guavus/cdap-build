---

- name: Add CDAP repo
  template:
    src: "{{ item }}.j2"
    dest: "/etc/yum.repos.d/{{ item }}"
  with_items:
    - cask.repo

- name: Yum Clean
  command: yum clean all

- name: Install cdap-ambari-service package
  package:
    name: 'cdap-ambari-service'
    state: present
  notify: Restart ambari-server
  when: inventory_hostname == groups[cdap_management_nodes][0]

- meta: flush_handlers

- name: Create users
  user:
    name: "{{ item.user }}"
    comment: '"{{ item.comment }}"'
    uid: "{{ item.id }}"
    group: hadoop
    groups: hadoop
  with_items:
    - { user: 'cdap', comment: 'CDAP user', id: '503'  }
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: Add CDAP Service to Ambari Cluster
  uri:
    url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/services"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: ' {"ServiceInfo":{"service_name":"CDAP"}} '
    status_code: 200,201,202,404,409
    return_content: no
  register: cdap_install_status
  retries: 10
  delay: 5
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: Add components to CDAP service
  uri:
   url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/services/CDAP/components/{{ item }}"
   method: POST
   force_basic_auth: yes
   user: "{{ ambari_admin_user }}"
   password: "{{ ambari_admin_password }}"
   headers: '{"X-Requested-By":"ambari"}'
   status_code: 200,201,202,404,409
   return_content: yes
  with_items:
    - CDAP_MASTER
    - CDAP_ROUTER
    - CDAP_UI
    - CDAP_KAFKA 
    - CDAP_AUTH_SERVER
    - CDAP_CLI
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: Create CDAP properties deployment directory
  file:
    path: "{{ cdap_properties_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0644
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: Write CDAP property files
  template:
    src: "{{ item }}.j2"
    dest: "{{ cdap_properties_dir }}/{{ item }}"
  with_items:
    - cdap-env.json
    - cdap-logback-container.json
    - cdap-logback.json
    - cdap-security.json
    - cdap-site.json
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: Create CDAP Configuration
  shell: "/var/lib/ambari-server/resources/scripts/configs.py -a set -u {{ ambari_admin_user }} -p {{ ambari_admin_password }} -l {{ cdap_loadbalancer_vip }} -n {{ cluster_name }} -c {{ item }} -f {{ cdap_properties_dir }}/{{ item }}.json "
  with_items:
    - cdap-env
    - cdap-logback-container
    - cdap-logback
    - cdap-security
    - cdap-site
  register: createconfig
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_status.status != 409

- name: Create facts for config name and version
  set_fact:
        configname: "{{ item.item }}"
        versiontimestamp: "{{ item.stdout_lines[-1] | regex_search('version([0-9]){10}')}}"
  with_items:
        - "{{createconfig.results}}"
  register: configvars
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_status.status != 409

- name: Create list for config name and version
  set_fact:
        config_list: "{{ configvars.results | map(attribute='ansible_facts.configname')| list }}"
        version_list:  "{{ configvars.results | map(attribute='ansible_facts.versiontimestamp') | list }}"
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_status.status != 409

- name: Apply CDAP configuration to the cluster
  uri:
    url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: '[{"Clusters": {"desired_configs": [{ "type": "config_list[0]", "tag" :"versiontimestamp[0]" }, { "type": "config_list[1]", "tag" :"versiontimestamp[1]" },{"type":"config_list[2]", "tag":"versiontimestamp[2]"},{"type":"config_list[3]", "tag":"versiontimestamp[3]"}, {"type":"config_list[4]", "tag":"versiontimestamp[4]"}]}}]'
    status_code: 200,201,202,404,409
    return_content: yes
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_status.status != 409

- name: Update cluster configs for CDAP Integration
  shell: "/var/lib/ambari-server/resources/scripts/configs.py -a set -u {{ ambari_admin_user }} -p {{ ambari_admin_password }} -l {{ cdap_loadbalancer_vip }} -n {{ cluster_name }} -c {{ item.config }} -k {{ item.key }} -v {{ item.value }}"
  with_items:
    - { config: 'zoo.cfg', key: 'maxClientCnxns', value: '0' }
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_status.status != 409

- name: Assign CDAP components to hosts
  shell: "curl -u {{ ambari_admin_user }}:{{ ambari_admin_password }} -i -H 'X-Requested-By:ambari' -X POST -d '{\"host_components\": [{ \"HostRoles\": { \"component_name\": \"{{ item[0] }}\" } }]}' http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/hosts?Hosts/host_name={{ item[1] }}"
  with_nested:
    - [ 'CDAP_MASTER', 'CDAP_ROUTER', 'CDAP_UI', 'CDAP_KAFKA', 'CDAP_AUTH_SERVER' ]
    - "{{ groups[cdap_master_nodes] }}"
  when: 
    - inventory_hostname == groups[cdap_management_nodes][0]
    - cdap_install_status.status != 409 and site_deployment_type == 'HA'

- name: Assign CDAP components to hosts
  shell: "curl -u {{ ambari_admin_user }}:{{ ambari_admin_password }} -i -H 'X-Requested-By:ambari' -X POST -d '{\"host_components\": [{ \"HostRoles\": { \"component_name\": \"{{ item[0] }}\" } }]}' http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/hosts?Hosts/host_name={{ item[1] }}"
  with_nested:
    - [ 'CDAP_MASTER', 'CDAP_ROUTER', 'CDAP_UI', 'CDAP_KAFKA', 'CDAP_AUTH_SERVER' ]
    - "{{ groups[cdap_master_nodes] }}"
  when: 
    - inventory_hostname == groups[cdap_management_nodes][0]
    - cdap_install_status.status != 409 and site_deployment_type == 'NONHA'

- name: Add CDAP_CLI to all hosts
  shell: "curl -u {{ ambari_admin_user }}:{{ ambari_admin_password }} -i -H 'X-Requested-By:ambari' -X POST -d '{\"host_components\": [{ \"HostRoles\": { \"component_name\": \"CDAP_CLI\" } }]}' http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/hosts?Hosts/host_name={{ item }}"
  with_inventory_hostnames:
    - all:!loadbalancer-nodes
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_status.status != 409 

- name: Install CDAP Service
  uri:
    url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/services/CDAP"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: '{ "RequestInfo": {"context" :"Install CDAP via REST api"}, "Body": {"ServiceInfo": {"state" : "INSTALLED"}}}'
    status_code: 200,201,202,404
    return_content: yes
  register: cdap_install_task
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: WAIT FOR CDAP INSTALLATION
  uri:
    url: "{{ (cdap_install_task.content|from_json).href }}"
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cdap_check_task
  until: (((cdap_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cdap_check_task.content|from_json).Requests.completed_task_count|int > 0) or
         (cdap_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cdap_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cdap_check_task.content|from_json).Requests.request_status == 'ABORTED')
  retries: 30
  delay: 60
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_install_task.content != ""

- name: Start CDAP Service
  uri:
    url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/services/CDAP"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: '{ "RequestInfo": {"context" :"Start CDAP components via REST api"}, "Body": {"ServiceInfo": {"state" : "STARTED"}}}'
    status_code: 200,201,202,404
    return_content: yes
  register: cdap_start_task
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: WAIT FOR CDAP TO START
  uri:
    url: "{{ (cdap_start_task.content|from_json).href }}"
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
    status_code: 200,201,202
    return_content: yes
  register: cdap_check_task
  until: (((cdap_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cdap_check_task.content|from_json).Requests.completed_task_count|int > 0) or
         (cdap_check_task.content|from_json).Requests.request_status == 'FAILED' or
         (cdap_check_task.content|from_json).Requests.request_status == 'TIMEDOUT' or
         (cdap_check_task.content|from_json).Requests.request_status == 'ABORTED')
  retries: 20
  delay: 30
  when: inventory_hostname == groups[cdap_management_nodes][0] and cdap_start_task.content != ""

- name: Enable AutoRecovery of CDAP Service/Components
  uri:
    url: "http://{{ cdap_loadbalancer_vip }}:8080/api/v1/clusters/{{ cluster_name }}/components?ServiceComponentInfo/component_name.in({{ item }})"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202
    body: '{"ServiceComponentInfo" : {"recovery_enabled":"true"}}'
    return_content: yes
  with_items:
    - CDAP_MASTER
    - CDAP_ROUTER
    - CDAP_UI
    - CDAP_KAFKA
    - CDAP_AUTH_SERVER
  when: inventory_hostname == groups[cdap_management_nodes][0]


- name: Restart ALL Required SERVICES
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/requests"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: ' {"RequestInfo": { "command":"RESTART", "context":"Restart all required services", "operation_level":"host_component" }, "Requests/resource_filters": [{ "hosts_predicate":"HostRoles/stale_configs=true" }]} '
    status_code: 200,201,202,404
    return_content: yes
  register: restart_reqd_services
  when: inventory_hostname == groups[cdap_management_nodes][0]

- name: WAIT FOR SERVICES TO RESTART
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/requests/{{ (restart_reqd_services.content|from_json).Requests.id }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: yes
  register: restartservice
  until: (restartservice.content|from_json).Requests.request_status == 'COMPLETED'
  retries: 30
  delay: 30
  when: inventory_hostname == groups[cdap_management_nodes][0] and restart_reqd_services.content != ""

- name: Add/Update ranger hdfs policies
  uri:
    url: "http://{{ hostvars[groups['loadbalancer-vip'][0]]['ansible_host'] }}:6080/service/public/v2/api/policy"
    method: POST
    force_basic_auth: yes
    user: "{{ rangeradmin_username }}"
    password: "{{ rangeradmin_password }}"
    headers: '{"Content-Type":"application/json", "X-Xsrf-Header":"valid"}'
    body: "{{ item }}"
    body_format: json
    status_code: 200,201,202,400
    return_content: yes
  with_items:
    - "{{ cdap_path_policy_config }}"
    - "{{ yarn_path_policy_config }}"

- name: 'Add all cdap machines in haproxy'
  blockinfile:
    dest: /etc/haproxy/haproxy.cfg
    backup: yes
    marker: "# {mark} CDAP MANAGED BLOCK"
    block: |
       listen CDAP_11011
         bind {{ site_floating_ip.ip }}:11011
         mode  http
         balance  roundrobin
         appsession JSESSIONID len 1024 timeout 1h request-learn
         option forwardfor
         {% for host in groups['master-nodes'] %}server {{ hostvars[host]['ansible_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:11011
         {%- if loop.first %} check
         {% else %}  check
         {% endif -%}
         {% endfor %}
  when: inventory_hostname in groups['loadbalancer-nodes']
