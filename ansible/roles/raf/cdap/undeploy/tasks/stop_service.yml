---

- name: Check {{ service_name }} exists or not 
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/services/{{ service_name }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: yes
  register: check_service

- name: Stop {{ service_name }} Service
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/services/{{ service_name }}"
    method: PUT
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    body: ' {"RequestInfo": {"context":"STOP {{ service_name }} Service via REST API"}, "Body":{"ServiceInfo":{"state":"INSTALLED"}}} '
    return_content: yes
  register: check_stop_service


- name: WAIT FOR {{ service_name }} TO STOP 
  uri:
    url: "http://{{ ansible_fqdn }}:8080/api/v1/clusters/{{ cluster_name }}/requests/{{ (check_stop_service.content|from_json).Requests.id }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari_admin_user }}"
    password: "{{ ambari_admin_password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: yes
  register: stopservice
  until: (stopservice.content|from_json).Requests.request_status == 'COMPLETED'
  retries: 50
  delay: 10
  when: check_stop_service.content != "" and check_service.status != 404

